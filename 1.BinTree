// 二叉树算法

class TreeNode {
    int val;
    TreeNode left, right;
}

void traverse(TreeNode root) {
    // 前序遍历
    traverse(root.left)
    // 中序遍历
    traverse(root.right)
    // 后序遍历
}


// 1. 二叉树最大路径和 LeetCode124
int ans = INT_MIN;
int OneSideMax(TreeNode* root) {
    if (root == nullptr) return 0;

    int left = max(0, OneSideMax(root->left));
    int right = max(0, OneSideMax(root->right));

    ans = max(ans, left + right + root->val);
    return max(left, right) + root->val;
}
// https://zhuanlan.zhihu.com/p/102602886

// 2. 根据前序遍历和中序遍历结果还原二叉树 LeetCode105
TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Interger, Interger> inMap) {
    if(preStart > preEnd || inStart > inEnd) return null;

    TreeNode root = new TreeNode(preorder[preStart]);
    int inRoot = inMap.get(root.val);
    int numsLeft = inRoot - inStart;

    root.left = buildTree(preorder, preStart+1, preStart+numsLeft,
                        inorder, inStart, inRoot-1, inMap);
    root.right = buildTree(preorder, preStart+numsLeft+1, preEnd,
                        inorder, inRoot+1, inEnd, inMap);
    return root;
}
// https://zhuanlan.zhihu.com/p/37265145

// 3. 恢复一棵二叉搜索树 LeetCode99
void traverse(TreeNode* node) {
    if(!node) return;

    traverse(node->left);

    if (node->val < prev->val) {
        s = (s == NULL) ? prev : s;
        t = node;
    }
    prev = node;

    traverse(node->right);
}

